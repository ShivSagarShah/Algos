 implement Lamportâ€™s logical clock.

 

#include <iostream>

using namespace std;

void stamps(int, int, int *, int *);

void lamportLogicalClock(int, int, int (*)[4]);

int findmax(int, int);

int main()

{

    int e1 = 6, e2 = 4, m[6][4];

    m[0][0] = 1;

    m[0][1] = 0;

    m[0][2] = 0;

    m[0][3] = 0;

    m[1][0] = -1;

    m[1][1] = 0;

    m[1][2] = 0;

    m[1][3] = 0;

    m[2][0] = 0;

    m[2][1] = 0;

    m[2][2] = 0;

    m[2][3] = 0;

    m[3][0] = 0;

    m[3][1] = 0;

    m[3][2] = 1;

    m[3][3] = 0;

    m[4][0] = 0;

    m[4][1] = 0;

    m[4][2] = -1;

    m[4][3] = 0;

    m[5][0] = m[5][1] = m[5][2] = m[5][3] = 0;

    lamportLogicalClock(e1, e2, m);

    return 0;

}

void stamps(int e1, int e2, int p1[6], int p2[4])

{

    int i;

    cout << "\nThe time stamps of events in P1:\n";

    for (i = 0; i < e1; i++)

        cout << p1[i] << " ";

    cout << "\nThe time stamps of events in P2:\n";

    for (i = 0; i < e2; i++)

        cout << p2[i] << " ";

    cout<<endl;

}

void lamportLogicalClock(int e1, int e2, int m[6][4])

{

    int i, j, k, p1[e1], p2[e2];

    for (i = 0; i < e1; i++)

        p1[i] = i + 1;

    for (i =0; i < e2; i++)

        p2[i] = i + 1;

    for (i = 0; i < e2; i++)

        cout << "\te2" << i + 1;

    for (i = 0; i < e1; i++)

    {

        cout << "\n e1" << i + 1 << "\t";

        for (j = 0; j < e2; j++)

            cout << m[i][j] << "\t";

    }

    for (i = 0; i < e1; i++)

    {

        for (j = 0; j < e2; j++)

        {

            if (m[i][j] == 1)

            {

                p2[j] = findmax(p2[j], p1[i] + 1);

                for (k = j + 1; k < e2; k++)

                    p2[k] = p2[k - 1] + 1;

            }

            if (m[i][j] == -1)

            {

                p1[i] = findmax(p1[i], p2[j] + 1);

                for (k = i + 1; k < e1; k++)

                    p1[k] = p1[k - 1] + 1;

            }

        }

    }

    stamps(e1, e2, p1, p2);

}

int findmax(int a, int b)

{

    if (a > b)

        return a;

    return b;

}

